// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TacticalData {

namespace {

const ::google::protobuf::Descriptor* State_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  State_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* State_OutputType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InfluenceMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InfluenceMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* InfluenceMap_DoubleMatrix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InfluenceMap_DoubleMatrix_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* InfluenceMap_InfluenceMapType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProtoData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_data_2eproto() {
  protobuf_AddDesc_data_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "data.proto");
  GOOGLE_CHECK(file != NULL);
  State_descriptor_ = file->message_type(0);
  static const int State_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, m_influence_map_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, m_outputtype_),
  };
  State_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      State_descriptor_,
      State::default_instance_,
      State_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(State));
  State_OutputType_descriptor_ = State_descriptor_->enum_type(0);
  InfluenceMap_descriptor_ = file->message_type(1);
  static const int InfluenceMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfluenceMap, m_matrix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfluenceMap, m_influence_map_type_),
  };
  InfluenceMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InfluenceMap_descriptor_,
      InfluenceMap::default_instance_,
      InfluenceMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfluenceMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfluenceMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InfluenceMap));
  InfluenceMap_DoubleMatrix_descriptor_ = InfluenceMap_descriptor_->nested_type(0);
  static const int InfluenceMap_DoubleMatrix_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfluenceMap_DoubleMatrix, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfluenceMap_DoubleMatrix, cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfluenceMap_DoubleMatrix, data_),
  };
  InfluenceMap_DoubleMatrix_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InfluenceMap_DoubleMatrix_descriptor_,
      InfluenceMap_DoubleMatrix::default_instance_,
      InfluenceMap_DoubleMatrix_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfluenceMap_DoubleMatrix, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfluenceMap_DoubleMatrix, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InfluenceMap_DoubleMatrix));
  InfluenceMap_InfluenceMapType_descriptor_ = InfluenceMap_descriptor_->enum_type(0);
  ProtoData_descriptor_ = file->message_type(2);
  static const int ProtoData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoData, state_),
  };
  ProtoData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoData_descriptor_,
      ProtoData::default_instance_,
      ProtoData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_data_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    State_descriptor_, &State::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InfluenceMap_descriptor_, &InfluenceMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InfluenceMap_DoubleMatrix_descriptor_, &InfluenceMap_DoubleMatrix::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoData_descriptor_, &ProtoData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_data_2eproto() {
  delete State::default_instance_;
  delete State_reflection_;
  delete InfluenceMap::default_instance_;
  delete InfluenceMap_reflection_;
  delete InfluenceMap_DoubleMatrix::default_instance_;
  delete InfluenceMap_DoubleMatrix_reflection_;
  delete ProtoData::default_instance_;
  delete ProtoData_reflection_;
}

void protobuf_AddDesc_data_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ndata.proto\022\014TacticalData\"\222\002\n\005State\0228\n\024"
    "m_influence_map_list\030\001 \003(\0132\032.TacticalDat"
    "a.InfluenceMap\0224\n\014m_outputType\030\002 \002(\0162\036.T"
    "acticalData.State.OutputType\"\230\001\n\nOutputT"
    "ype\022\021\n\rAlly_MainArmy\020\000\022\r\n\tAlly_Base\020\001\022\017\n"
    "\013Ally_Second\020\002\022\017\n\013Ally_Others\020\003\022\016\n\nEnemy"
    "_Base\020\004\022\020\n\014Enemy_Second\020\005\022\020\n\014Enemy_Other"
    "s\020\006\022\022\n\016Enemy_MainArmy\020\007\"\221\026\n\014InfluenceMap"
    "\0229\n\010m_matrix\030\001 \002(\0132\'.TacticalData.Influe"
    "nceMap.DoubleMatrix\022I\n\024m_influence_map_t"
    "ype\030\002 \002(\0162+.TacticalData.InfluenceMap.In"
    "fluenceMapType\032<\n\014DoubleMatrix\022\014\n\004rows\030\001"
    " \002(\r\022\014\n\004cols\030\002 \002(\r\022\020\n\004data\030\003 \003(\005B\002\020\001\"\274\024\n"
    "\020InfluenceMapType\022\035\n\031Enemy_Unit_Protoss_"
    "Archon\020\000\022#\n\037Enemy_Unit_Protoss_Dark_Temp"
    "lar\020\001\022\036\n\032Enemy_Unit_Protoss_Dragoon\020\002\022#\n"
    "\037Enemy_Unit_Protoss_High_Templar\020\003\022\034\n\030En"
    "emy_Unit_Protoss_Probe\020\004\022\035\n\031Enemy_Unit_P"
    "rotoss_Reaver\020\005\022\035\n\031Enemy_Unit_Protoss_Ze"
    "alot\020\006\022\036\n\032Enemy_Unit_Protoss_Arbiter\020\007\022\036"
    "\n\032Enemy_Unit_Protoss_Carrier\020\010\022\036\n\032Enemy_"
    "Unit_Protoss_Corsair\020\t\022\037\n\033Enemy_Unit_Pro"
    "toss_Observer\020\n\022\036\n\032Enemy_Unit_Protoss_Sh"
    "uttle\020\013\022\035\n\031Enemy_Unit_Terran_Firebat\020\014\022\035"
    "\n\031Enemy_Unit_Terran_Goliath\020\r\022\034\n\030Enemy_U"
    "nit_Terran_Marine\020\016\022\033\n\027Enemy_Unit_Terran"
    "_Medic\020\017\022\031\n\025Enemy_Unit_Terran_SCV\020\020\022*\n&E"
    "nemy_Unit_Terran_Siege_Tank_Tank_Mode\020\021\022"
    "\035\n\031Enemy_Unit_Terran_Vulture\020\022\022!\n\035Enemy_"
    "Unit_Terran_Spider_Mine\020\023\022#\n\037Enemy_Unit_"
    "Terran_Battlecruiser\020\024\022\036\n\032Enemy_Unit_Ter"
    "ran_Dropship\020\025\022$\n Enemy_Unit_Terran_Scie"
    "nce_Vessel\020\026\022\036\n\032Enemy_Unit_Terran_Valkyr"
    "ie\020\027\022\034\n\030Enemy_Unit_Terran_Wraith\020\030\022\033\n\027En"
    "emy_Unit_Zerg_Defiler\020\031\022\031\n\025Enemy_Unit_Ze"
    "rg_Drone\020\032\022\035\n\031Enemy_Unit_Zerg_Hydralisk\020"
    "\033\022\032\n\026Enemy_Unit_Zerg_Lurker\020\034\022\035\n\031Enemy_U"
    "nit_Zerg_Ultralisk\020\035\022\034\n\030Enemy_Unit_Zerg_"
    "Zergling\020\036\022\034\n\030Enemy_Unit_Zerg_Guardian\020\037"
    "\022\034\n\030Enemy_Unit_Zerg_Mutalisk\020 \022\034\n\030Enemy_"
    "Unit_Zerg_Overload\020!\022\033\n\027Enemy_Unit_Zerg_"
    "Scourge\020\"\022\027\n\023Enemy_Building_Base\020#\022\032\n\026En"
    "emy_Building_Defense\020$\022\031\n\025Enemy_Building"
    "_Others\020%\022\034\n\030Ally_Unit_Protoss_Archon\020&\022"
    "\"\n\036Ally_Unit_Protoss_Dark_Templar\020\'\022\035\n\031A"
    "lly_Unit_Protoss_Dragoon\020(\022\"\n\036Ally_Unit_"
    "Protoss_High_Templar\020)\022\033\n\027Ally_Unit_Prot"
    "oss_Probe\020*\022\034\n\030Ally_Unit_Protoss_Reaver\020"
    "+\022\034\n\030Ally_Unit_Protoss_Zealot\020,\022\035\n\031Ally_"
    "Unit_Protoss_Arbiter\020-\022\035\n\031Ally_Unit_Prot"
    "oss_Carrier\020.\022\035\n\031Ally_Unit_Protoss_Corsa"
    "ir\020/\022\036\n\032Ally_Unit_Protoss_Observer\0200\022\035\n\031"
    "Ally_Unit_Protoss_Shuttle\0201\022\034\n\030Ally_Unit"
    "_Terran_Firebat\0202\022\034\n\030Ally_Unit_Terran_Go"
    "liath\0203\022\033\n\027Ally_Unit_Terran_Marine\0204\022\032\n\026"
    "Ally_Unit_Terran_Medic\0205\022\030\n\024Ally_Unit_Te"
    "rran_SCV\0206\022)\n%Ally_Unit_Terran_Siege_Tan"
    "k_Tank_Mode\0207\022\034\n\030Ally_Unit_Terran_Vultur"
    "e\0208\022 \n\034Ally_Unit_Terran_Spider_Mine\0209\022\"\n"
    "\036Ally_Unit_Terran_Battlecruiser\020:\022\035\n\031All"
    "y_Unit_Terran_Dropship\020;\022#\n\037Ally_Unit_Te"
    "rran_Science_Vessel\020<\022\035\n\031Ally_Unit_Terra"
    "n_Valkyrie\020=\022\033\n\027Ally_Unit_Terran_Wraith\020"
    ">\022\032\n\026Ally_Unit_Zerg_Defiler\020\?\022\030\n\024Ally_Un"
    "it_Zerg_Drone\020@\022\034\n\030Ally_Unit_Zerg_Hydral"
    "isk\020A\022\031\n\025Ally_Unit_Zerg_Lurker\020B\022\034\n\030Ally"
    "_Unit_Zerg_Ultralisk\020C\022\033\n\027Ally_Unit_Zerg"
    "_Zergling\020D\022\033\n\027Ally_Unit_Zerg_Guardian\020E"
    "\022\033\n\027Ally_Unit_Zerg_Mutalisk\020F\022\033\n\027Ally_Un"
    "it_Zerg_Overload\020G\022\032\n\026Ally_Unit_Zerg_Sco"
    "urge\020H\022\026\n\022Ally_Building_Base\020I\022\031\n\025Ally_B"
    "uilding_Defense\020J\022\030\n\024Ally_Building_Other"
    "s\020K\022\021\n\rAlly_Minerals\020L\022\014\n\010Ally_Gas\020M\022\023\n\017"
    "Ally_Population\020N\022\025\n\021Ally_Race_Protoss\020O"
    "\022\024\n\020Ally_Race_Terran\020P\022\022\n\016Ally_Race_Zerg"
    "\020Q\022\026\n\022Enemy_Race_Protoss\020R\022\025\n\021Enemy_Race"
    "_Terran\020S\022\023\n\017Enemy_Race_Zerg\020T\022\r\n\tGame_T"
    "ime\020U\022\021\n\rTerrain_Plain\020V\022\020\n\014Terrain_Hill"
    "\020W\022\017\n\013Terrain_Sky\020X\"/\n\tProtoData\022\"\n\005stat"
    "e\030\001 \003(\0132\023.TacticalData.State", 3188);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "data.proto", &protobuf_RegisterTypes);
  State::default_instance_ = new State();
  InfluenceMap::default_instance_ = new InfluenceMap();
  InfluenceMap_DoubleMatrix::default_instance_ = new InfluenceMap_DoubleMatrix();
  ProtoData::default_instance_ = new ProtoData();
  State::default_instance_->InitAsDefaultInstance();
  InfluenceMap::default_instance_->InitAsDefaultInstance();
  InfluenceMap_DoubleMatrix::default_instance_->InitAsDefaultInstance();
  ProtoData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_data_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_data_2eproto {
  StaticDescriptorInitializer_data_2eproto() {
    protobuf_AddDesc_data_2eproto();
  }
} static_descriptor_initializer_data_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* State_OutputType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return State_OutputType_descriptor_;
}
bool State_OutputType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const State_OutputType State::Ally_MainArmy;
const State_OutputType State::Ally_Base;
const State_OutputType State::Ally_Second;
const State_OutputType State::Ally_Others;
const State_OutputType State::Enemy_Base;
const State_OutputType State::Enemy_Second;
const State_OutputType State::Enemy_Others;
const State_OutputType State::Enemy_MainArmy;
const State_OutputType State::OutputType_MIN;
const State_OutputType State::OutputType_MAX;
const int State::OutputType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int State::kMInfluenceMapListFieldNumber;
const int State::kMOutputTypeFieldNumber;
#endif  // !_MSC_VER

State::State()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TacticalData.State)
}

void State::InitAsDefaultInstance() {
}

State::State(const State& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TacticalData.State)
}

void State::SharedCtor() {
  _cached_size_ = 0;
  m_outputtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

State::~State() {
  // @@protoc_insertion_point(destructor:TacticalData.State)
  SharedDtor();
}

void State::SharedDtor() {
  if (this != default_instance_) {
  }
}

void State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* State::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return State_descriptor_;
}

const State& State::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();
  return *default_instance_;
}

State* State::default_instance_ = NULL;

State* State::New() const {
  return new State;
}

void State::Clear() {
  m_outputtype_ = 0;
  m_influence_map_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TacticalData.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TacticalData.InfluenceMap m_influence_map_list = 1;
      case 1: {
        if (tag == 10) {
         parse_m_influence_map_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_influence_map_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_m_influence_map_list;
        if (input->ExpectTag(16)) goto parse_m_outputType;
        break;
      }

      // required .TacticalData.State.OutputType m_outputType = 2;
      case 2: {
        if (tag == 16) {
         parse_m_outputType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TacticalData::State_OutputType_IsValid(value)) {
            set_m_outputtype(static_cast< ::TacticalData::State_OutputType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TacticalData.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TacticalData.State)
  return false;
#undef DO_
}

void State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TacticalData.State)
  // repeated .TacticalData.InfluenceMap m_influence_map_list = 1;
  for (int i = 0; i < this->m_influence_map_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_influence_map_list(i), output);
  }

  // required .TacticalData.State.OutputType m_outputType = 2;
  if (has_m_outputtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->m_outputtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TacticalData.State)
}

::google::protobuf::uint8* State::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TacticalData.State)
  // repeated .TacticalData.InfluenceMap m_influence_map_list = 1;
  for (int i = 0; i < this->m_influence_map_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_influence_map_list(i), target);
  }

  // required .TacticalData.State.OutputType m_outputType = 2;
  if (has_m_outputtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->m_outputtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TacticalData.State)
  return target;
}

int State::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .TacticalData.State.OutputType m_outputType = 2;
    if (has_m_outputtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->m_outputtype());
    }

  }
  // repeated .TacticalData.InfluenceMap m_influence_map_list = 1;
  total_size += 1 * this->m_influence_map_list_size();
  for (int i = 0; i < this->m_influence_map_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_influence_map_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void State::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const State* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const State*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_influence_map_list_.MergeFrom(from.m_influence_map_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_m_outputtype()) {
      set_m_outputtype(from.m_outputtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void State::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->m_influence_map_list())) return false;
  return true;
}

void State::Swap(State* other) {
  if (other != this) {
    m_influence_map_list_.Swap(&other->m_influence_map_list_);
    std::swap(m_outputtype_, other->m_outputtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata State::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = State_descriptor_;
  metadata.reflection = State_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* InfluenceMap_InfluenceMapType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InfluenceMap_InfluenceMapType_descriptor_;
}
bool InfluenceMap_InfluenceMapType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Protoss_Archon;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Protoss_Dark_Templar;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Protoss_Dragoon;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Protoss_High_Templar;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Protoss_Probe;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Protoss_Reaver;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Protoss_Zealot;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Protoss_Arbiter;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Protoss_Carrier;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Protoss_Corsair;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Protoss_Observer;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Protoss_Shuttle;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Terran_Firebat;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Terran_Goliath;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Terran_Marine;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Terran_Medic;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Terran_SCV;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Terran_Siege_Tank_Tank_Mode;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Terran_Vulture;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Terran_Spider_Mine;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Terran_Battlecruiser;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Terran_Dropship;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Terran_Science_Vessel;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Terran_Valkyrie;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Terran_Wraith;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Zerg_Defiler;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Zerg_Drone;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Zerg_Hydralisk;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Zerg_Lurker;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Zerg_Ultralisk;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Zerg_Zergling;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Zerg_Guardian;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Zerg_Mutalisk;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Zerg_Overload;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Unit_Zerg_Scourge;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Building_Base;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Building_Defense;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Building_Others;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Protoss_Archon;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Protoss_Dark_Templar;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Protoss_Dragoon;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Protoss_High_Templar;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Protoss_Probe;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Protoss_Reaver;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Protoss_Zealot;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Protoss_Arbiter;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Protoss_Carrier;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Protoss_Corsair;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Protoss_Observer;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Protoss_Shuttle;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Terran_Firebat;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Terran_Goliath;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Terran_Marine;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Terran_Medic;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Terran_SCV;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Terran_Siege_Tank_Tank_Mode;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Terran_Vulture;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Terran_Spider_Mine;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Terran_Battlecruiser;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Terran_Dropship;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Terran_Science_Vessel;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Terran_Valkyrie;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Terran_Wraith;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Zerg_Defiler;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Zerg_Drone;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Zerg_Hydralisk;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Zerg_Lurker;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Zerg_Ultralisk;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Zerg_Zergling;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Zerg_Guardian;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Zerg_Mutalisk;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Zerg_Overload;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Unit_Zerg_Scourge;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Building_Base;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Building_Defense;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Building_Others;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Minerals;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Gas;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Population;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Race_Protoss;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Race_Terran;
const InfluenceMap_InfluenceMapType InfluenceMap::Ally_Race_Zerg;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Race_Protoss;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Race_Terran;
const InfluenceMap_InfluenceMapType InfluenceMap::Enemy_Race_Zerg;
const InfluenceMap_InfluenceMapType InfluenceMap::Game_Time;
const InfluenceMap_InfluenceMapType InfluenceMap::Terrain_Plain;
const InfluenceMap_InfluenceMapType InfluenceMap::Terrain_Hill;
const InfluenceMap_InfluenceMapType InfluenceMap::Terrain_Sky;
const InfluenceMap_InfluenceMapType InfluenceMap::InfluenceMapType_MIN;
const InfluenceMap_InfluenceMapType InfluenceMap::InfluenceMapType_MAX;
const int InfluenceMap::InfluenceMapType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int InfluenceMap_DoubleMatrix::kRowsFieldNumber;
const int InfluenceMap_DoubleMatrix::kColsFieldNumber;
const int InfluenceMap_DoubleMatrix::kDataFieldNumber;
#endif  // !_MSC_VER

InfluenceMap_DoubleMatrix::InfluenceMap_DoubleMatrix()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TacticalData.InfluenceMap.DoubleMatrix)
}

void InfluenceMap_DoubleMatrix::InitAsDefaultInstance() {
}

InfluenceMap_DoubleMatrix::InfluenceMap_DoubleMatrix(const InfluenceMap_DoubleMatrix& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TacticalData.InfluenceMap.DoubleMatrix)
}

void InfluenceMap_DoubleMatrix::SharedCtor() {
  _cached_size_ = 0;
  rows_ = 0u;
  cols_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InfluenceMap_DoubleMatrix::~InfluenceMap_DoubleMatrix() {
  // @@protoc_insertion_point(destructor:TacticalData.InfluenceMap.DoubleMatrix)
  SharedDtor();
}

void InfluenceMap_DoubleMatrix::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InfluenceMap_DoubleMatrix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfluenceMap_DoubleMatrix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InfluenceMap_DoubleMatrix_descriptor_;
}

const InfluenceMap_DoubleMatrix& InfluenceMap_DoubleMatrix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();
  return *default_instance_;
}

InfluenceMap_DoubleMatrix* InfluenceMap_DoubleMatrix::default_instance_ = NULL;

InfluenceMap_DoubleMatrix* InfluenceMap_DoubleMatrix::New() const {
  return new InfluenceMap_DoubleMatrix;
}

void InfluenceMap_DoubleMatrix::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InfluenceMap_DoubleMatrix*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rows_, cols_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InfluenceMap_DoubleMatrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TacticalData.InfluenceMap.DoubleMatrix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rows = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rows_)));
          set_has_rows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cols;
        break;
      }

      // required uint32 cols = 2;
      case 2: {
        if (tag == 16) {
         parse_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cols_)));
          set_has_cols();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated int32 data = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_data())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TacticalData.InfluenceMap.DoubleMatrix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TacticalData.InfluenceMap.DoubleMatrix)
  return false;
#undef DO_
}

void InfluenceMap_DoubleMatrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TacticalData.InfluenceMap.DoubleMatrix)
  // required uint32 rows = 1;
  if (has_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rows(), output);
  }

  // required uint32 cols = 2;
  if (has_cols()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cols(), output);
  }

  // repeated int32 data = 3 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TacticalData.InfluenceMap.DoubleMatrix)
}

::google::protobuf::uint8* InfluenceMap_DoubleMatrix::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TacticalData.InfluenceMap.DoubleMatrix)
  // required uint32 rows = 1;
  if (has_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rows(), target);
  }

  // required uint32 cols = 2;
  if (has_cols()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cols(), target);
  }

  // repeated int32 data = 3 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TacticalData.InfluenceMap.DoubleMatrix)
  return target;
}

int InfluenceMap_DoubleMatrix::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rows = 1;
    if (has_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rows());
    }

    // required uint32 cols = 2;
    if (has_cols()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cols());
    }

  }
  // repeated int32 data = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->data(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfluenceMap_DoubleMatrix::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InfluenceMap_DoubleMatrix* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InfluenceMap_DoubleMatrix*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InfluenceMap_DoubleMatrix::MergeFrom(const InfluenceMap_DoubleMatrix& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rows()) {
      set_rows(from.rows());
    }
    if (from.has_cols()) {
      set_cols(from.cols());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InfluenceMap_DoubleMatrix::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfluenceMap_DoubleMatrix::CopyFrom(const InfluenceMap_DoubleMatrix& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfluenceMap_DoubleMatrix::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void InfluenceMap_DoubleMatrix::Swap(InfluenceMap_DoubleMatrix* other) {
  if (other != this) {
    std::swap(rows_, other->rows_);
    std::swap(cols_, other->cols_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InfluenceMap_DoubleMatrix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InfluenceMap_DoubleMatrix_descriptor_;
  metadata.reflection = InfluenceMap_DoubleMatrix_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int InfluenceMap::kMMatrixFieldNumber;
const int InfluenceMap::kMInfluenceMapTypeFieldNumber;
#endif  // !_MSC_VER

InfluenceMap::InfluenceMap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TacticalData.InfluenceMap)
}

void InfluenceMap::InitAsDefaultInstance() {
  m_matrix_ = const_cast< ::TacticalData::InfluenceMap_DoubleMatrix*>(&::TacticalData::InfluenceMap_DoubleMatrix::default_instance());
}

InfluenceMap::InfluenceMap(const InfluenceMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TacticalData.InfluenceMap)
}

void InfluenceMap::SharedCtor() {
  _cached_size_ = 0;
  m_matrix_ = NULL;
  m_influence_map_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InfluenceMap::~InfluenceMap() {
  // @@protoc_insertion_point(destructor:TacticalData.InfluenceMap)
  SharedDtor();
}

void InfluenceMap::SharedDtor() {
  if (this != default_instance_) {
    delete m_matrix_;
  }
}

void InfluenceMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfluenceMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InfluenceMap_descriptor_;
}

const InfluenceMap& InfluenceMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();
  return *default_instance_;
}

InfluenceMap* InfluenceMap::default_instance_ = NULL;

InfluenceMap* InfluenceMap::New() const {
  return new InfluenceMap;
}

void InfluenceMap::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_m_matrix()) {
      if (m_matrix_ != NULL) m_matrix_->::TacticalData::InfluenceMap_DoubleMatrix::Clear();
    }
    m_influence_map_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InfluenceMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TacticalData.InfluenceMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TacticalData.InfluenceMap.DoubleMatrix m_matrix = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_matrix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_influence_map_type;
        break;
      }

      // required .TacticalData.InfluenceMap.InfluenceMapType m_influence_map_type = 2;
      case 2: {
        if (tag == 16) {
         parse_m_influence_map_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TacticalData::InfluenceMap_InfluenceMapType_IsValid(value)) {
            set_m_influence_map_type(static_cast< ::TacticalData::InfluenceMap_InfluenceMapType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TacticalData.InfluenceMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TacticalData.InfluenceMap)
  return false;
#undef DO_
}

void InfluenceMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TacticalData.InfluenceMap)
  // required .TacticalData.InfluenceMap.DoubleMatrix m_matrix = 1;
  if (has_m_matrix()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_matrix(), output);
  }

  // required .TacticalData.InfluenceMap.InfluenceMapType m_influence_map_type = 2;
  if (has_m_influence_map_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->m_influence_map_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TacticalData.InfluenceMap)
}

::google::protobuf::uint8* InfluenceMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TacticalData.InfluenceMap)
  // required .TacticalData.InfluenceMap.DoubleMatrix m_matrix = 1;
  if (has_m_matrix()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_matrix(), target);
  }

  // required .TacticalData.InfluenceMap.InfluenceMapType m_influence_map_type = 2;
  if (has_m_influence_map_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->m_influence_map_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TacticalData.InfluenceMap)
  return target;
}

int InfluenceMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TacticalData.InfluenceMap.DoubleMatrix m_matrix = 1;
    if (has_m_matrix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_matrix());
    }

    // required .TacticalData.InfluenceMap.InfluenceMapType m_influence_map_type = 2;
    if (has_m_influence_map_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->m_influence_map_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfluenceMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InfluenceMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InfluenceMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InfluenceMap::MergeFrom(const InfluenceMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_matrix()) {
      mutable_m_matrix()->::TacticalData::InfluenceMap_DoubleMatrix::MergeFrom(from.m_matrix());
    }
    if (from.has_m_influence_map_type()) {
      set_m_influence_map_type(from.m_influence_map_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InfluenceMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfluenceMap::CopyFrom(const InfluenceMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfluenceMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_m_matrix()) {
    if (!this->m_matrix().IsInitialized()) return false;
  }
  return true;
}

void InfluenceMap::Swap(InfluenceMap* other) {
  if (other != this) {
    std::swap(m_matrix_, other->m_matrix_);
    std::swap(m_influence_map_type_, other->m_influence_map_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InfluenceMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InfluenceMap_descriptor_;
  metadata.reflection = InfluenceMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoData::kStateFieldNumber;
#endif  // !_MSC_VER

ProtoData::ProtoData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TacticalData.ProtoData)
}

void ProtoData::InitAsDefaultInstance() {
}

ProtoData::ProtoData(const ProtoData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TacticalData.ProtoData)
}

void ProtoData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoData::~ProtoData() {
  // @@protoc_insertion_point(destructor:TacticalData.ProtoData)
  SharedDtor();
}

void ProtoData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoData_descriptor_;
}

const ProtoData& ProtoData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();
  return *default_instance_;
}

ProtoData* ProtoData::default_instance_ = NULL;

ProtoData* ProtoData::New() const {
  return new ProtoData;
}

void ProtoData::Clear() {
  state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TacticalData.ProtoData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TacticalData.State state = 1;
      case 1: {
        if (tag == 10) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_state;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TacticalData.ProtoData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TacticalData.ProtoData)
  return false;
#undef DO_
}

void ProtoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TacticalData.ProtoData)
  // repeated .TacticalData.State state = 1;
  for (int i = 0; i < this->state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->state(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TacticalData.ProtoData)
}

::google::protobuf::uint8* ProtoData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TacticalData.ProtoData)
  // repeated .TacticalData.State state = 1;
  for (int i = 0; i < this->state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->state(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TacticalData.ProtoData)
  return target;
}

int ProtoData::ByteSize() const {
  int total_size = 0;

  // repeated .TacticalData.State state = 1;
  total_size += 1 * this->state_size();
  for (int i = 0; i < this->state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->state(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoData::MergeFrom(const ProtoData& from) {
  GOOGLE_CHECK_NE(&from, this);
  state_.MergeFrom(from.state_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoData::CopyFrom(const ProtoData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoData::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->state())) return false;
  return true;
}

void ProtoData::Swap(ProtoData* other) {
  if (other != this) {
    state_.Swap(&other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoData_descriptor_;
  metadata.reflection = ProtoData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TacticalData

// @@protoc_insertion_point(global_scope)
