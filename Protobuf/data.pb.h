// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef PROTOBUF_data_2eproto__INCLUDED
#define PROTOBUF_data_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace TacticalData {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_data_2eproto();
void protobuf_AssignDesc_data_2eproto();
void protobuf_ShutdownFile_data_2eproto();

class State;
class InfluenceMap;
class InfluenceMap_DoubleMatrix;
class ProtoData;

enum State_OutputType {
  State_OutputType_Ally_MainArmy = 0,
  State_OutputType_Ally_Base = 1,
  State_OutputType_Ally_Second = 2,
  State_OutputType_Ally_Others = 3,
  State_OutputType_Enemy_Base = 4,
  State_OutputType_Enemy_Second = 5,
  State_OutputType_Enemy_Others = 6,
  State_OutputType_Enemy_MainArmy = 7
};
bool State_OutputType_IsValid(int value);
const State_OutputType State_OutputType_OutputType_MIN = State_OutputType_Ally_MainArmy;
const State_OutputType State_OutputType_OutputType_MAX = State_OutputType_Enemy_MainArmy;
const int State_OutputType_OutputType_ARRAYSIZE = State_OutputType_OutputType_MAX + 1;

const ::google::protobuf::EnumDescriptor* State_OutputType_descriptor();
inline const ::std::string& State_OutputType_Name(State_OutputType value) {
  return ::google::protobuf::internal::NameOfEnum(
    State_OutputType_descriptor(), value);
}
inline bool State_OutputType_Parse(
    const ::std::string& name, State_OutputType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<State_OutputType>(
    State_OutputType_descriptor(), name, value);
}
enum InfluenceMap_InfluenceMapType {
  InfluenceMap_InfluenceMapType_Enemy_Unit_Protoss_Archon = 0,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Protoss_Dark_Templar = 1,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Protoss_Dragoon = 2,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Protoss_High_Templar = 3,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Protoss_Probe = 4,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Protoss_Reaver = 5,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Protoss_Zealot = 6,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Protoss_Arbiter = 7,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Protoss_Carrier = 8,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Protoss_Corsair = 9,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Protoss_Observer = 10,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Protoss_Shuttle = 11,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Terran_Firebat = 12,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Terran_Goliath = 13,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Terran_Marine = 14,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Terran_Medic = 15,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Terran_SCV = 16,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Terran_Siege_Tank_Tank_Mode = 17,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Terran_Vulture = 18,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Terran_Spider_Mine = 19,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Terran_Battlecruiser = 20,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Terran_Dropship = 21,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Terran_Science_Vessel = 22,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Terran_Valkyrie = 23,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Terran_Wraith = 24,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Zerg_Defiler = 25,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Zerg_Drone = 26,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Zerg_Hydralisk = 27,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Zerg_Lurker = 28,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Zerg_Ultralisk = 29,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Zerg_Zergling = 30,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Zerg_Guardian = 31,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Zerg_Mutalisk = 32,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Zerg_Overload = 33,
  InfluenceMap_InfluenceMapType_Enemy_Unit_Zerg_Scourge = 34,
  InfluenceMap_InfluenceMapType_Enemy_Building_Base = 35,
  InfluenceMap_InfluenceMapType_Enemy_Building_Defense = 36,
  InfluenceMap_InfluenceMapType_Enemy_Building_Others = 37,
  InfluenceMap_InfluenceMapType_Ally_Unit_Protoss_Archon = 38,
  InfluenceMap_InfluenceMapType_Ally_Unit_Protoss_Dark_Templar = 39,
  InfluenceMap_InfluenceMapType_Ally_Unit_Protoss_Dragoon = 40,
  InfluenceMap_InfluenceMapType_Ally_Unit_Protoss_High_Templar = 41,
  InfluenceMap_InfluenceMapType_Ally_Unit_Protoss_Probe = 42,
  InfluenceMap_InfluenceMapType_Ally_Unit_Protoss_Reaver = 43,
  InfluenceMap_InfluenceMapType_Ally_Unit_Protoss_Zealot = 44,
  InfluenceMap_InfluenceMapType_Ally_Unit_Protoss_Arbiter = 45,
  InfluenceMap_InfluenceMapType_Ally_Unit_Protoss_Carrier = 46,
  InfluenceMap_InfluenceMapType_Ally_Unit_Protoss_Corsair = 47,
  InfluenceMap_InfluenceMapType_Ally_Unit_Protoss_Observer = 48,
  InfluenceMap_InfluenceMapType_Ally_Unit_Protoss_Shuttle = 49,
  InfluenceMap_InfluenceMapType_Ally_Unit_Terran_Firebat = 50,
  InfluenceMap_InfluenceMapType_Ally_Unit_Terran_Goliath = 51,
  InfluenceMap_InfluenceMapType_Ally_Unit_Terran_Marine = 52,
  InfluenceMap_InfluenceMapType_Ally_Unit_Terran_Medic = 53,
  InfluenceMap_InfluenceMapType_Ally_Unit_Terran_SCV = 54,
  InfluenceMap_InfluenceMapType_Ally_Unit_Terran_Siege_Tank_Tank_Mode = 55,
  InfluenceMap_InfluenceMapType_Ally_Unit_Terran_Vulture = 56,
  InfluenceMap_InfluenceMapType_Ally_Unit_Terran_Spider_Mine = 57,
  InfluenceMap_InfluenceMapType_Ally_Unit_Terran_Battlecruiser = 58,
  InfluenceMap_InfluenceMapType_Ally_Unit_Terran_Dropship = 59,
  InfluenceMap_InfluenceMapType_Ally_Unit_Terran_Science_Vessel = 60,
  InfluenceMap_InfluenceMapType_Ally_Unit_Terran_Valkyrie = 61,
  InfluenceMap_InfluenceMapType_Ally_Unit_Terran_Wraith = 62,
  InfluenceMap_InfluenceMapType_Ally_Unit_Zerg_Defiler = 63,
  InfluenceMap_InfluenceMapType_Ally_Unit_Zerg_Drone = 64,
  InfluenceMap_InfluenceMapType_Ally_Unit_Zerg_Hydralisk = 65,
  InfluenceMap_InfluenceMapType_Ally_Unit_Zerg_Lurker = 66,
  InfluenceMap_InfluenceMapType_Ally_Unit_Zerg_Ultralisk = 67,
  InfluenceMap_InfluenceMapType_Ally_Unit_Zerg_Zergling = 68,
  InfluenceMap_InfluenceMapType_Ally_Unit_Zerg_Guardian = 69,
  InfluenceMap_InfluenceMapType_Ally_Unit_Zerg_Mutalisk = 70,
  InfluenceMap_InfluenceMapType_Ally_Unit_Zerg_Overload = 71,
  InfluenceMap_InfluenceMapType_Ally_Unit_Zerg_Scourge = 72,
  InfluenceMap_InfluenceMapType_Ally_Building_Base = 73,
  InfluenceMap_InfluenceMapType_Ally_Building_Defense = 74,
  InfluenceMap_InfluenceMapType_Ally_Building_Others = 75,
  InfluenceMap_InfluenceMapType_Ally_Minerals = 76,
  InfluenceMap_InfluenceMapType_Ally_Gas = 77,
  InfluenceMap_InfluenceMapType_Ally_Population = 78,
  InfluenceMap_InfluenceMapType_Ally_Race_Protoss = 79,
  InfluenceMap_InfluenceMapType_Ally_Race_Terran = 80,
  InfluenceMap_InfluenceMapType_Ally_Race_Zerg = 81,
  InfluenceMap_InfluenceMapType_Enemy_Race_Protoss = 82,
  InfluenceMap_InfluenceMapType_Enemy_Race_Terran = 83,
  InfluenceMap_InfluenceMapType_Enemy_Race_Zerg = 84,
  InfluenceMap_InfluenceMapType_Game_Time = 85,
  InfluenceMap_InfluenceMapType_Terrain_Plain = 86,
  InfluenceMap_InfluenceMapType_Terrain_Hill = 87,
  InfluenceMap_InfluenceMapType_Terrain_Sky = 88
};
bool InfluenceMap_InfluenceMapType_IsValid(int value);
const InfluenceMap_InfluenceMapType InfluenceMap_InfluenceMapType_InfluenceMapType_MIN = InfluenceMap_InfluenceMapType_Enemy_Unit_Protoss_Archon;
const InfluenceMap_InfluenceMapType InfluenceMap_InfluenceMapType_InfluenceMapType_MAX = InfluenceMap_InfluenceMapType_Terrain_Sky;
const int InfluenceMap_InfluenceMapType_InfluenceMapType_ARRAYSIZE = InfluenceMap_InfluenceMapType_InfluenceMapType_MAX + 1;

const ::google::protobuf::EnumDescriptor* InfluenceMap_InfluenceMapType_descriptor();
inline const ::std::string& InfluenceMap_InfluenceMapType_Name(InfluenceMap_InfluenceMapType value) {
  return ::google::protobuf::internal::NameOfEnum(
    InfluenceMap_InfluenceMapType_descriptor(), value);
}
inline bool InfluenceMap_InfluenceMapType_Parse(
    const ::std::string& name, InfluenceMap_InfluenceMapType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InfluenceMap_InfluenceMapType>(
    InfluenceMap_InfluenceMapType_descriptor(), name, value);
}
// ===================================================================

class State : public ::google::protobuf::Message {
 public:
  State();
  virtual ~State();

  State(const State& from);

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const State& default_instance();

  void Swap(State* other);

  // implements Message ----------------------------------------------

  State* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef State_OutputType OutputType;
  static const OutputType Ally_MainArmy = State_OutputType_Ally_MainArmy;
  static const OutputType Ally_Base = State_OutputType_Ally_Base;
  static const OutputType Ally_Second = State_OutputType_Ally_Second;
  static const OutputType Ally_Others = State_OutputType_Ally_Others;
  static const OutputType Enemy_Base = State_OutputType_Enemy_Base;
  static const OutputType Enemy_Second = State_OutputType_Enemy_Second;
  static const OutputType Enemy_Others = State_OutputType_Enemy_Others;
  static const OutputType Enemy_MainArmy = State_OutputType_Enemy_MainArmy;
  static inline bool OutputType_IsValid(int value) {
    return State_OutputType_IsValid(value);
  }
  static const OutputType OutputType_MIN =
    State_OutputType_OutputType_MIN;
  static const OutputType OutputType_MAX =
    State_OutputType_OutputType_MAX;
  static const int OutputType_ARRAYSIZE =
    State_OutputType_OutputType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OutputType_descriptor() {
    return State_OutputType_descriptor();
  }
  static inline const ::std::string& OutputType_Name(OutputType value) {
    return State_OutputType_Name(value);
  }
  static inline bool OutputType_Parse(const ::std::string& name,
      OutputType* value) {
    return State_OutputType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .TacticalData.InfluenceMap m_influence_map_list = 1;
  inline int m_influence_map_list_size() const;
  inline void clear_m_influence_map_list();
  static const int kMInfluenceMapListFieldNumber = 1;
  inline const ::TacticalData::InfluenceMap& m_influence_map_list(int index) const;
  inline ::TacticalData::InfluenceMap* mutable_m_influence_map_list(int index);
  inline ::TacticalData::InfluenceMap* add_m_influence_map_list();
  inline const ::google::protobuf::RepeatedPtrField< ::TacticalData::InfluenceMap >&
      m_influence_map_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::TacticalData::InfluenceMap >*
      mutable_m_influence_map_list();

  // required .TacticalData.State.OutputType m_outputType = 2;
  inline bool has_m_outputtype() const;
  inline void clear_m_outputtype();
  static const int kMOutputTypeFieldNumber = 2;
  inline ::TacticalData::State_OutputType m_outputtype() const;
  inline void set_m_outputtype(::TacticalData::State_OutputType value);

  // @@protoc_insertion_point(class_scope:TacticalData.State)
 private:
  inline void set_has_m_outputtype();
  inline void clear_has_m_outputtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::TacticalData::InfluenceMap > m_influence_map_list_;
  int m_outputtype_;
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();

  void InitAsDefaultInstance();
  static State* default_instance_;
};
// -------------------------------------------------------------------

class InfluenceMap_DoubleMatrix : public ::google::protobuf::Message {
 public:
  InfluenceMap_DoubleMatrix();
  virtual ~InfluenceMap_DoubleMatrix();

  InfluenceMap_DoubleMatrix(const InfluenceMap_DoubleMatrix& from);

  inline InfluenceMap_DoubleMatrix& operator=(const InfluenceMap_DoubleMatrix& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfluenceMap_DoubleMatrix& default_instance();

  void Swap(InfluenceMap_DoubleMatrix* other);

  // implements Message ----------------------------------------------

  InfluenceMap_DoubleMatrix* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InfluenceMap_DoubleMatrix& from);
  void MergeFrom(const InfluenceMap_DoubleMatrix& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 rows = 1;
  inline bool has_rows() const;
  inline void clear_rows();
  static const int kRowsFieldNumber = 1;
  inline ::google::protobuf::uint32 rows() const;
  inline void set_rows(::google::protobuf::uint32 value);

  // required uint32 cols = 2;
  inline bool has_cols() const;
  inline void clear_cols();
  static const int kColsFieldNumber = 2;
  inline ::google::protobuf::uint32 cols() const;
  inline void set_cols(::google::protobuf::uint32 value);

  // repeated int32 data = 3 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline ::google::protobuf::int32 data(int index) const;
  inline void set_data(int index, ::google::protobuf::int32 value);
  inline void add_data(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:TacticalData.InfluenceMap.DoubleMatrix)
 private:
  inline void set_has_rows();
  inline void clear_has_rows();
  inline void set_has_cols();
  inline void clear_has_cols();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 rows_;
  ::google::protobuf::uint32 cols_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > data_;
  mutable int _data_cached_byte_size_;
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();

  void InitAsDefaultInstance();
  static InfluenceMap_DoubleMatrix* default_instance_;
};
// -------------------------------------------------------------------

class InfluenceMap : public ::google::protobuf::Message {
 public:
  InfluenceMap();
  virtual ~InfluenceMap();

  InfluenceMap(const InfluenceMap& from);

  inline InfluenceMap& operator=(const InfluenceMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfluenceMap& default_instance();

  void Swap(InfluenceMap* other);

  // implements Message ----------------------------------------------

  InfluenceMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InfluenceMap& from);
  void MergeFrom(const InfluenceMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef InfluenceMap_DoubleMatrix DoubleMatrix;

  typedef InfluenceMap_InfluenceMapType InfluenceMapType;
  static const InfluenceMapType Enemy_Unit_Protoss_Archon = InfluenceMap_InfluenceMapType_Enemy_Unit_Protoss_Archon;
  static const InfluenceMapType Enemy_Unit_Protoss_Dark_Templar = InfluenceMap_InfluenceMapType_Enemy_Unit_Protoss_Dark_Templar;
  static const InfluenceMapType Enemy_Unit_Protoss_Dragoon = InfluenceMap_InfluenceMapType_Enemy_Unit_Protoss_Dragoon;
  static const InfluenceMapType Enemy_Unit_Protoss_High_Templar = InfluenceMap_InfluenceMapType_Enemy_Unit_Protoss_High_Templar;
  static const InfluenceMapType Enemy_Unit_Protoss_Probe = InfluenceMap_InfluenceMapType_Enemy_Unit_Protoss_Probe;
  static const InfluenceMapType Enemy_Unit_Protoss_Reaver = InfluenceMap_InfluenceMapType_Enemy_Unit_Protoss_Reaver;
  static const InfluenceMapType Enemy_Unit_Protoss_Zealot = InfluenceMap_InfluenceMapType_Enemy_Unit_Protoss_Zealot;
  static const InfluenceMapType Enemy_Unit_Protoss_Arbiter = InfluenceMap_InfluenceMapType_Enemy_Unit_Protoss_Arbiter;
  static const InfluenceMapType Enemy_Unit_Protoss_Carrier = InfluenceMap_InfluenceMapType_Enemy_Unit_Protoss_Carrier;
  static const InfluenceMapType Enemy_Unit_Protoss_Corsair = InfluenceMap_InfluenceMapType_Enemy_Unit_Protoss_Corsair;
  static const InfluenceMapType Enemy_Unit_Protoss_Observer = InfluenceMap_InfluenceMapType_Enemy_Unit_Protoss_Observer;
  static const InfluenceMapType Enemy_Unit_Protoss_Shuttle = InfluenceMap_InfluenceMapType_Enemy_Unit_Protoss_Shuttle;
  static const InfluenceMapType Enemy_Unit_Terran_Firebat = InfluenceMap_InfluenceMapType_Enemy_Unit_Terran_Firebat;
  static const InfluenceMapType Enemy_Unit_Terran_Goliath = InfluenceMap_InfluenceMapType_Enemy_Unit_Terran_Goliath;
  static const InfluenceMapType Enemy_Unit_Terran_Marine = InfluenceMap_InfluenceMapType_Enemy_Unit_Terran_Marine;
  static const InfluenceMapType Enemy_Unit_Terran_Medic = InfluenceMap_InfluenceMapType_Enemy_Unit_Terran_Medic;
  static const InfluenceMapType Enemy_Unit_Terran_SCV = InfluenceMap_InfluenceMapType_Enemy_Unit_Terran_SCV;
  static const InfluenceMapType Enemy_Unit_Terran_Siege_Tank_Tank_Mode = InfluenceMap_InfluenceMapType_Enemy_Unit_Terran_Siege_Tank_Tank_Mode;
  static const InfluenceMapType Enemy_Unit_Terran_Vulture = InfluenceMap_InfluenceMapType_Enemy_Unit_Terran_Vulture;
  static const InfluenceMapType Enemy_Unit_Terran_Spider_Mine = InfluenceMap_InfluenceMapType_Enemy_Unit_Terran_Spider_Mine;
  static const InfluenceMapType Enemy_Unit_Terran_Battlecruiser = InfluenceMap_InfluenceMapType_Enemy_Unit_Terran_Battlecruiser;
  static const InfluenceMapType Enemy_Unit_Terran_Dropship = InfluenceMap_InfluenceMapType_Enemy_Unit_Terran_Dropship;
  static const InfluenceMapType Enemy_Unit_Terran_Science_Vessel = InfluenceMap_InfluenceMapType_Enemy_Unit_Terran_Science_Vessel;
  static const InfluenceMapType Enemy_Unit_Terran_Valkyrie = InfluenceMap_InfluenceMapType_Enemy_Unit_Terran_Valkyrie;
  static const InfluenceMapType Enemy_Unit_Terran_Wraith = InfluenceMap_InfluenceMapType_Enemy_Unit_Terran_Wraith;
  static const InfluenceMapType Enemy_Unit_Zerg_Defiler = InfluenceMap_InfluenceMapType_Enemy_Unit_Zerg_Defiler;
  static const InfluenceMapType Enemy_Unit_Zerg_Drone = InfluenceMap_InfluenceMapType_Enemy_Unit_Zerg_Drone;
  static const InfluenceMapType Enemy_Unit_Zerg_Hydralisk = InfluenceMap_InfluenceMapType_Enemy_Unit_Zerg_Hydralisk;
  static const InfluenceMapType Enemy_Unit_Zerg_Lurker = InfluenceMap_InfluenceMapType_Enemy_Unit_Zerg_Lurker;
  static const InfluenceMapType Enemy_Unit_Zerg_Ultralisk = InfluenceMap_InfluenceMapType_Enemy_Unit_Zerg_Ultralisk;
  static const InfluenceMapType Enemy_Unit_Zerg_Zergling = InfluenceMap_InfluenceMapType_Enemy_Unit_Zerg_Zergling;
  static const InfluenceMapType Enemy_Unit_Zerg_Guardian = InfluenceMap_InfluenceMapType_Enemy_Unit_Zerg_Guardian;
  static const InfluenceMapType Enemy_Unit_Zerg_Mutalisk = InfluenceMap_InfluenceMapType_Enemy_Unit_Zerg_Mutalisk;
  static const InfluenceMapType Enemy_Unit_Zerg_Overload = InfluenceMap_InfluenceMapType_Enemy_Unit_Zerg_Overload;
  static const InfluenceMapType Enemy_Unit_Zerg_Scourge = InfluenceMap_InfluenceMapType_Enemy_Unit_Zerg_Scourge;
  static const InfluenceMapType Enemy_Building_Base = InfluenceMap_InfluenceMapType_Enemy_Building_Base;
  static const InfluenceMapType Enemy_Building_Defense = InfluenceMap_InfluenceMapType_Enemy_Building_Defense;
  static const InfluenceMapType Enemy_Building_Others = InfluenceMap_InfluenceMapType_Enemy_Building_Others;
  static const InfluenceMapType Ally_Unit_Protoss_Archon = InfluenceMap_InfluenceMapType_Ally_Unit_Protoss_Archon;
  static const InfluenceMapType Ally_Unit_Protoss_Dark_Templar = InfluenceMap_InfluenceMapType_Ally_Unit_Protoss_Dark_Templar;
  static const InfluenceMapType Ally_Unit_Protoss_Dragoon = InfluenceMap_InfluenceMapType_Ally_Unit_Protoss_Dragoon;
  static const InfluenceMapType Ally_Unit_Protoss_High_Templar = InfluenceMap_InfluenceMapType_Ally_Unit_Protoss_High_Templar;
  static const InfluenceMapType Ally_Unit_Protoss_Probe = InfluenceMap_InfluenceMapType_Ally_Unit_Protoss_Probe;
  static const InfluenceMapType Ally_Unit_Protoss_Reaver = InfluenceMap_InfluenceMapType_Ally_Unit_Protoss_Reaver;
  static const InfluenceMapType Ally_Unit_Protoss_Zealot = InfluenceMap_InfluenceMapType_Ally_Unit_Protoss_Zealot;
  static const InfluenceMapType Ally_Unit_Protoss_Arbiter = InfluenceMap_InfluenceMapType_Ally_Unit_Protoss_Arbiter;
  static const InfluenceMapType Ally_Unit_Protoss_Carrier = InfluenceMap_InfluenceMapType_Ally_Unit_Protoss_Carrier;
  static const InfluenceMapType Ally_Unit_Protoss_Corsair = InfluenceMap_InfluenceMapType_Ally_Unit_Protoss_Corsair;
  static const InfluenceMapType Ally_Unit_Protoss_Observer = InfluenceMap_InfluenceMapType_Ally_Unit_Protoss_Observer;
  static const InfluenceMapType Ally_Unit_Protoss_Shuttle = InfluenceMap_InfluenceMapType_Ally_Unit_Protoss_Shuttle;
  static const InfluenceMapType Ally_Unit_Terran_Firebat = InfluenceMap_InfluenceMapType_Ally_Unit_Terran_Firebat;
  static const InfluenceMapType Ally_Unit_Terran_Goliath = InfluenceMap_InfluenceMapType_Ally_Unit_Terran_Goliath;
  static const InfluenceMapType Ally_Unit_Terran_Marine = InfluenceMap_InfluenceMapType_Ally_Unit_Terran_Marine;
  static const InfluenceMapType Ally_Unit_Terran_Medic = InfluenceMap_InfluenceMapType_Ally_Unit_Terran_Medic;
  static const InfluenceMapType Ally_Unit_Terran_SCV = InfluenceMap_InfluenceMapType_Ally_Unit_Terran_SCV;
  static const InfluenceMapType Ally_Unit_Terran_Siege_Tank_Tank_Mode = InfluenceMap_InfluenceMapType_Ally_Unit_Terran_Siege_Tank_Tank_Mode;
  static const InfluenceMapType Ally_Unit_Terran_Vulture = InfluenceMap_InfluenceMapType_Ally_Unit_Terran_Vulture;
  static const InfluenceMapType Ally_Unit_Terran_Spider_Mine = InfluenceMap_InfluenceMapType_Ally_Unit_Terran_Spider_Mine;
  static const InfluenceMapType Ally_Unit_Terran_Battlecruiser = InfluenceMap_InfluenceMapType_Ally_Unit_Terran_Battlecruiser;
  static const InfluenceMapType Ally_Unit_Terran_Dropship = InfluenceMap_InfluenceMapType_Ally_Unit_Terran_Dropship;
  static const InfluenceMapType Ally_Unit_Terran_Science_Vessel = InfluenceMap_InfluenceMapType_Ally_Unit_Terran_Science_Vessel;
  static const InfluenceMapType Ally_Unit_Terran_Valkyrie = InfluenceMap_InfluenceMapType_Ally_Unit_Terran_Valkyrie;
  static const InfluenceMapType Ally_Unit_Terran_Wraith = InfluenceMap_InfluenceMapType_Ally_Unit_Terran_Wraith;
  static const InfluenceMapType Ally_Unit_Zerg_Defiler = InfluenceMap_InfluenceMapType_Ally_Unit_Zerg_Defiler;
  static const InfluenceMapType Ally_Unit_Zerg_Drone = InfluenceMap_InfluenceMapType_Ally_Unit_Zerg_Drone;
  static const InfluenceMapType Ally_Unit_Zerg_Hydralisk = InfluenceMap_InfluenceMapType_Ally_Unit_Zerg_Hydralisk;
  static const InfluenceMapType Ally_Unit_Zerg_Lurker = InfluenceMap_InfluenceMapType_Ally_Unit_Zerg_Lurker;
  static const InfluenceMapType Ally_Unit_Zerg_Ultralisk = InfluenceMap_InfluenceMapType_Ally_Unit_Zerg_Ultralisk;
  static const InfluenceMapType Ally_Unit_Zerg_Zergling = InfluenceMap_InfluenceMapType_Ally_Unit_Zerg_Zergling;
  static const InfluenceMapType Ally_Unit_Zerg_Guardian = InfluenceMap_InfluenceMapType_Ally_Unit_Zerg_Guardian;
  static const InfluenceMapType Ally_Unit_Zerg_Mutalisk = InfluenceMap_InfluenceMapType_Ally_Unit_Zerg_Mutalisk;
  static const InfluenceMapType Ally_Unit_Zerg_Overload = InfluenceMap_InfluenceMapType_Ally_Unit_Zerg_Overload;
  static const InfluenceMapType Ally_Unit_Zerg_Scourge = InfluenceMap_InfluenceMapType_Ally_Unit_Zerg_Scourge;
  static const InfluenceMapType Ally_Building_Base = InfluenceMap_InfluenceMapType_Ally_Building_Base;
  static const InfluenceMapType Ally_Building_Defense = InfluenceMap_InfluenceMapType_Ally_Building_Defense;
  static const InfluenceMapType Ally_Building_Others = InfluenceMap_InfluenceMapType_Ally_Building_Others;
  static const InfluenceMapType Ally_Minerals = InfluenceMap_InfluenceMapType_Ally_Minerals;
  static const InfluenceMapType Ally_Gas = InfluenceMap_InfluenceMapType_Ally_Gas;
  static const InfluenceMapType Ally_Population = InfluenceMap_InfluenceMapType_Ally_Population;
  static const InfluenceMapType Ally_Race_Protoss = InfluenceMap_InfluenceMapType_Ally_Race_Protoss;
  static const InfluenceMapType Ally_Race_Terran = InfluenceMap_InfluenceMapType_Ally_Race_Terran;
  static const InfluenceMapType Ally_Race_Zerg = InfluenceMap_InfluenceMapType_Ally_Race_Zerg;
  static const InfluenceMapType Enemy_Race_Protoss = InfluenceMap_InfluenceMapType_Enemy_Race_Protoss;
  static const InfluenceMapType Enemy_Race_Terran = InfluenceMap_InfluenceMapType_Enemy_Race_Terran;
  static const InfluenceMapType Enemy_Race_Zerg = InfluenceMap_InfluenceMapType_Enemy_Race_Zerg;
  static const InfluenceMapType Game_Time = InfluenceMap_InfluenceMapType_Game_Time;
  static const InfluenceMapType Terrain_Plain = InfluenceMap_InfluenceMapType_Terrain_Plain;
  static const InfluenceMapType Terrain_Hill = InfluenceMap_InfluenceMapType_Terrain_Hill;
  static const InfluenceMapType Terrain_Sky = InfluenceMap_InfluenceMapType_Terrain_Sky;
  static inline bool InfluenceMapType_IsValid(int value) {
    return InfluenceMap_InfluenceMapType_IsValid(value);
  }
  static const InfluenceMapType InfluenceMapType_MIN =
    InfluenceMap_InfluenceMapType_InfluenceMapType_MIN;
  static const InfluenceMapType InfluenceMapType_MAX =
    InfluenceMap_InfluenceMapType_InfluenceMapType_MAX;
  static const int InfluenceMapType_ARRAYSIZE =
    InfluenceMap_InfluenceMapType_InfluenceMapType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  InfluenceMapType_descriptor() {
    return InfluenceMap_InfluenceMapType_descriptor();
  }
  static inline const ::std::string& InfluenceMapType_Name(InfluenceMapType value) {
    return InfluenceMap_InfluenceMapType_Name(value);
  }
  static inline bool InfluenceMapType_Parse(const ::std::string& name,
      InfluenceMapType* value) {
    return InfluenceMap_InfluenceMapType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .TacticalData.InfluenceMap.DoubleMatrix m_matrix = 1;
  inline bool has_m_matrix() const;
  inline void clear_m_matrix();
  static const int kMMatrixFieldNumber = 1;
  inline const ::TacticalData::InfluenceMap_DoubleMatrix& m_matrix() const;
  inline ::TacticalData::InfluenceMap_DoubleMatrix* mutable_m_matrix();
  inline ::TacticalData::InfluenceMap_DoubleMatrix* release_m_matrix();
  inline void set_allocated_m_matrix(::TacticalData::InfluenceMap_DoubleMatrix* m_matrix);

  // required .TacticalData.InfluenceMap.InfluenceMapType m_influence_map_type = 2;
  inline bool has_m_influence_map_type() const;
  inline void clear_m_influence_map_type();
  static const int kMInfluenceMapTypeFieldNumber = 2;
  inline ::TacticalData::InfluenceMap_InfluenceMapType m_influence_map_type() const;
  inline void set_m_influence_map_type(::TacticalData::InfluenceMap_InfluenceMapType value);

  // @@protoc_insertion_point(class_scope:TacticalData.InfluenceMap)
 private:
  inline void set_has_m_matrix();
  inline void clear_has_m_matrix();
  inline void set_has_m_influence_map_type();
  inline void clear_has_m_influence_map_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::TacticalData::InfluenceMap_DoubleMatrix* m_matrix_;
  int m_influence_map_type_;
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();

  void InitAsDefaultInstance();
  static InfluenceMap* default_instance_;
};
// -------------------------------------------------------------------

class ProtoData : public ::google::protobuf::Message {
 public:
  ProtoData();
  virtual ~ProtoData();

  ProtoData(const ProtoData& from);

  inline ProtoData& operator=(const ProtoData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoData& default_instance();

  void Swap(ProtoData* other);

  // implements Message ----------------------------------------------

  ProtoData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoData& from);
  void MergeFrom(const ProtoData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TacticalData.State state = 1;
  inline int state_size() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline const ::TacticalData::State& state(int index) const;
  inline ::TacticalData::State* mutable_state(int index);
  inline ::TacticalData::State* add_state();
  inline const ::google::protobuf::RepeatedPtrField< ::TacticalData::State >&
      state() const;
  inline ::google::protobuf::RepeatedPtrField< ::TacticalData::State >*
      mutable_state();

  // @@protoc_insertion_point(class_scope:TacticalData.ProtoData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::TacticalData::State > state_;
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();

  void InitAsDefaultInstance();
  static ProtoData* default_instance_;
};
// ===================================================================


// ===================================================================

// State

// repeated .TacticalData.InfluenceMap m_influence_map_list = 1;
inline int State::m_influence_map_list_size() const {
  return m_influence_map_list_.size();
}
inline void State::clear_m_influence_map_list() {
  m_influence_map_list_.Clear();
}
inline const ::TacticalData::InfluenceMap& State::m_influence_map_list(int index) const {
  // @@protoc_insertion_point(field_get:TacticalData.State.m_influence_map_list)
  return m_influence_map_list_.Get(index);
}
inline ::TacticalData::InfluenceMap* State::mutable_m_influence_map_list(int index) {
  // @@protoc_insertion_point(field_mutable:TacticalData.State.m_influence_map_list)
  return m_influence_map_list_.Mutable(index);
}
inline ::TacticalData::InfluenceMap* State::add_m_influence_map_list() {
  // @@protoc_insertion_point(field_add:TacticalData.State.m_influence_map_list)
  return m_influence_map_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TacticalData::InfluenceMap >&
State::m_influence_map_list() const {
  // @@protoc_insertion_point(field_list:TacticalData.State.m_influence_map_list)
  return m_influence_map_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::TacticalData::InfluenceMap >*
State::mutable_m_influence_map_list() {
  // @@protoc_insertion_point(field_mutable_list:TacticalData.State.m_influence_map_list)
  return &m_influence_map_list_;
}

// required .TacticalData.State.OutputType m_outputType = 2;
inline bool State::has_m_outputtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void State::set_has_m_outputtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void State::clear_has_m_outputtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void State::clear_m_outputtype() {
  m_outputtype_ = 0;
  clear_has_m_outputtype();
}
inline ::TacticalData::State_OutputType State::m_outputtype() const {
  // @@protoc_insertion_point(field_get:TacticalData.State.m_outputType)
  return static_cast< ::TacticalData::State_OutputType >(m_outputtype_);
}
inline void State::set_m_outputtype(::TacticalData::State_OutputType value) {
  assert(::TacticalData::State_OutputType_IsValid(value));
  set_has_m_outputtype();
  m_outputtype_ = value;
  // @@protoc_insertion_point(field_set:TacticalData.State.m_outputType)
}

// -------------------------------------------------------------------

// InfluenceMap_DoubleMatrix

// required uint32 rows = 1;
inline bool InfluenceMap_DoubleMatrix::has_rows() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InfluenceMap_DoubleMatrix::set_has_rows() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InfluenceMap_DoubleMatrix::clear_has_rows() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InfluenceMap_DoubleMatrix::clear_rows() {
  rows_ = 0u;
  clear_has_rows();
}
inline ::google::protobuf::uint32 InfluenceMap_DoubleMatrix::rows() const {
  // @@protoc_insertion_point(field_get:TacticalData.InfluenceMap.DoubleMatrix.rows)
  return rows_;
}
inline void InfluenceMap_DoubleMatrix::set_rows(::google::protobuf::uint32 value) {
  set_has_rows();
  rows_ = value;
  // @@protoc_insertion_point(field_set:TacticalData.InfluenceMap.DoubleMatrix.rows)
}

// required uint32 cols = 2;
inline bool InfluenceMap_DoubleMatrix::has_cols() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InfluenceMap_DoubleMatrix::set_has_cols() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InfluenceMap_DoubleMatrix::clear_has_cols() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InfluenceMap_DoubleMatrix::clear_cols() {
  cols_ = 0u;
  clear_has_cols();
}
inline ::google::protobuf::uint32 InfluenceMap_DoubleMatrix::cols() const {
  // @@protoc_insertion_point(field_get:TacticalData.InfluenceMap.DoubleMatrix.cols)
  return cols_;
}
inline void InfluenceMap_DoubleMatrix::set_cols(::google::protobuf::uint32 value) {
  set_has_cols();
  cols_ = value;
  // @@protoc_insertion_point(field_set:TacticalData.InfluenceMap.DoubleMatrix.cols)
}

// repeated int32 data = 3 [packed = true];
inline int InfluenceMap_DoubleMatrix::data_size() const {
  return data_.size();
}
inline void InfluenceMap_DoubleMatrix::clear_data() {
  data_.Clear();
}
inline ::google::protobuf::int32 InfluenceMap_DoubleMatrix::data(int index) const {
  // @@protoc_insertion_point(field_get:TacticalData.InfluenceMap.DoubleMatrix.data)
  return data_.Get(index);
}
inline void InfluenceMap_DoubleMatrix::set_data(int index, ::google::protobuf::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:TacticalData.InfluenceMap.DoubleMatrix.data)
}
inline void InfluenceMap_DoubleMatrix::add_data(::google::protobuf::int32 value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:TacticalData.InfluenceMap.DoubleMatrix.data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
InfluenceMap_DoubleMatrix::data() const {
  // @@protoc_insertion_point(field_list:TacticalData.InfluenceMap.DoubleMatrix.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
InfluenceMap_DoubleMatrix::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:TacticalData.InfluenceMap.DoubleMatrix.data)
  return &data_;
}

// -------------------------------------------------------------------

// InfluenceMap

// required .TacticalData.InfluenceMap.DoubleMatrix m_matrix = 1;
inline bool InfluenceMap::has_m_matrix() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InfluenceMap::set_has_m_matrix() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InfluenceMap::clear_has_m_matrix() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InfluenceMap::clear_m_matrix() {
  if (m_matrix_ != NULL) m_matrix_->::TacticalData::InfluenceMap_DoubleMatrix::Clear();
  clear_has_m_matrix();
}
inline const ::TacticalData::InfluenceMap_DoubleMatrix& InfluenceMap::m_matrix() const {
  // @@protoc_insertion_point(field_get:TacticalData.InfluenceMap.m_matrix)
  return m_matrix_ != NULL ? *m_matrix_ : *default_instance_->m_matrix_;
}
inline ::TacticalData::InfluenceMap_DoubleMatrix* InfluenceMap::mutable_m_matrix() {
  set_has_m_matrix();
  if (m_matrix_ == NULL) m_matrix_ = new ::TacticalData::InfluenceMap_DoubleMatrix;
  // @@protoc_insertion_point(field_mutable:TacticalData.InfluenceMap.m_matrix)
  return m_matrix_;
}
inline ::TacticalData::InfluenceMap_DoubleMatrix* InfluenceMap::release_m_matrix() {
  clear_has_m_matrix();
  ::TacticalData::InfluenceMap_DoubleMatrix* temp = m_matrix_;
  m_matrix_ = NULL;
  return temp;
}
inline void InfluenceMap::set_allocated_m_matrix(::TacticalData::InfluenceMap_DoubleMatrix* m_matrix) {
  delete m_matrix_;
  m_matrix_ = m_matrix;
  if (m_matrix) {
    set_has_m_matrix();
  } else {
    clear_has_m_matrix();
  }
  // @@protoc_insertion_point(field_set_allocated:TacticalData.InfluenceMap.m_matrix)
}

// required .TacticalData.InfluenceMap.InfluenceMapType m_influence_map_type = 2;
inline bool InfluenceMap::has_m_influence_map_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InfluenceMap::set_has_m_influence_map_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InfluenceMap::clear_has_m_influence_map_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InfluenceMap::clear_m_influence_map_type() {
  m_influence_map_type_ = 0;
  clear_has_m_influence_map_type();
}
inline ::TacticalData::InfluenceMap_InfluenceMapType InfluenceMap::m_influence_map_type() const {
  // @@protoc_insertion_point(field_get:TacticalData.InfluenceMap.m_influence_map_type)
  return static_cast< ::TacticalData::InfluenceMap_InfluenceMapType >(m_influence_map_type_);
}
inline void InfluenceMap::set_m_influence_map_type(::TacticalData::InfluenceMap_InfluenceMapType value) {
  assert(::TacticalData::InfluenceMap_InfluenceMapType_IsValid(value));
  set_has_m_influence_map_type();
  m_influence_map_type_ = value;
  // @@protoc_insertion_point(field_set:TacticalData.InfluenceMap.m_influence_map_type)
}

// -------------------------------------------------------------------

// ProtoData

// repeated .TacticalData.State state = 1;
inline int ProtoData::state_size() const {
  return state_.size();
}
inline void ProtoData::clear_state() {
  state_.Clear();
}
inline const ::TacticalData::State& ProtoData::state(int index) const {
  // @@protoc_insertion_point(field_get:TacticalData.ProtoData.state)
  return state_.Get(index);
}
inline ::TacticalData::State* ProtoData::mutable_state(int index) {
  // @@protoc_insertion_point(field_mutable:TacticalData.ProtoData.state)
  return state_.Mutable(index);
}
inline ::TacticalData::State* ProtoData::add_state() {
  // @@protoc_insertion_point(field_add:TacticalData.ProtoData.state)
  return state_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TacticalData::State >&
ProtoData::state() const {
  // @@protoc_insertion_point(field_list:TacticalData.ProtoData.state)
  return state_;
}
inline ::google::protobuf::RepeatedPtrField< ::TacticalData::State >*
ProtoData::mutable_state() {
  // @@protoc_insertion_point(field_mutable_list:TacticalData.ProtoData.state)
  return &state_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TacticalData

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::TacticalData::State_OutputType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TacticalData::State_OutputType>() {
  return ::TacticalData::State_OutputType_descriptor();
}
template <> struct is_proto_enum< ::TacticalData::InfluenceMap_InfluenceMapType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TacticalData::InfluenceMap_InfluenceMapType>() {
  return ::TacticalData::InfluenceMap_InfluenceMapType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_data_2eproto__INCLUDED
